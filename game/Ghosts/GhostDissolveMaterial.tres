[gd_resource type="ShaderMaterial" load_steps=15 format=2]

[ext_resource path="res://Ghosts/NoiseTexture.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarUniform" id=1]
uniform_name = "amount"

[sub_resource type="VisualShaderNodeScalarClamp" id=2]

[sub_resource type="VisualShaderNodeScalarOp" id=3]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=4]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=5]
constant = 3.14159

[sub_resource type="VisualShaderNodeScalarFunc" id=6]
output_port_for_preview = 0
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=7]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.7 ]
operator = 1

[sub_resource type="VisualShaderNodeColorConstant" id=8]
constant = Color( 0.789469, 0.693773, 1, 1 )

[sub_resource type="VisualShaderNodeInput" id=9]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=10]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=11]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarFunc" id=12]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShader" id=13]
code = "shader_type spatial;
render_mode depth_draw_alpha_prepass, cull_disabled, specular_schlick_ggx;

uniform sampler2D tex_frg_7;
uniform float amount;



void vertex() {
// Output:0

}

void fragment() {
// Color:19
	vec3 n_out19p0 = vec3(0.789469, 0.693773, 1.000000);
	float n_out19p1 = 1.000000;

// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// Texture:7
	vec4 tex_frg_7_read = texture(tex_frg_7, n_out2p0.xy);
	vec3 n_out7p0 = tex_frg_7_read.rgb;
	float n_out7p1 = tex_frg_7_read.a;

// ScalarUniform:11
	float n_out11p0 = amount;

// ScalarClamp:13
	float n_in13p1 = 0.00000;
	float n_in13p2 = 1.00000;
	float n_out13p0 = clamp(n_out11p0, n_in13p1, n_in13p2);

// ScalarOp:14
	float n_in14p1 = 0.50000;
	float n_out14p0 = n_out13p0 * n_in14p1;

// Scalar:16
	float n_out16p0 = 3.141590;

// ScalarOp:15
	float n_out15p0 = n_out14p0 * n_out16p0;

// ScalarFunc:17
	float n_out17p0 = sin(n_out15p0);

// ScalarOp:8
	float n_out8p0 = dot(n_out7p0, vec3(0.333333, 0.333333, 0.333333)) + n_out17p0;

// ScalarOp:18
	float n_in18p1 = 0.70000;
	float n_out18p0 = n_out8p0 - n_in18p1;

// ScalarFunc:9
	float n_out9p0 = round(n_out18p0);

// Output:0
	ALBEDO = n_out19p0;
	ALPHA = n_out9p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 443.423, -219.62 )
modes/cull = 2
modes/depth_draw = 3
nodes/fragment/0/position = Vector2( 2580, -60 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( 640, -240 )
nodes/fragment/7/node = SubResource( 10 )
nodes/fragment/7/position = Vector2( 1180, -240 )
nodes/fragment/8/node = SubResource( 11 )
nodes/fragment/8/position = Vector2( 1600, -60 )
nodes/fragment/9/node = SubResource( 12 )
nodes/fragment/9/position = Vector2( 2160, -20 )
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( 40, 400 )
nodes/fragment/13/node = SubResource( 2 )
nodes/fragment/13/position = Vector2( 380, 400 )
nodes/fragment/14/node = SubResource( 3 )
nodes/fragment/14/position = Vector2( 700, 400 )
nodes/fragment/15/node = SubResource( 4 )
nodes/fragment/15/position = Vector2( 1020, 400 )
nodes/fragment/16/node = SubResource( 5 )
nodes/fragment/16/position = Vector2( 660, 620 )
nodes/fragment/17/node = SubResource( 6 )
nodes/fragment/17/position = Vector2( 1340, 400 )
nodes/fragment/18/node = SubResource( 7 )
nodes/fragment/18/position = Vector2( 1880, 420 )
nodes/fragment/19/node = SubResource( 8 )
nodes/fragment/19/position = Vector2( 2220, -260 )
nodes/fragment/connections = PoolIntArray( 2, 0, 7, 0, 7, 0, 8, 0, 9, 0, 0, 1, 11, 0, 13, 0, 13, 0, 14, 0, 14, 0, 15, 0, 16, 0, 15, 1, 15, 0, 17, 0, 17, 0, 8, 1, 8, 0, 18, 0, 18, 0, 9, 0, 19, 0, 0, 0 )

[resource]
shader = SubResource( 13 )
shader_param/amount = 0.89
